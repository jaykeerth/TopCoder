public class PointsInAPlane {

	public int howManyTriangles(int[] x, int[] y) {
		if(x.length <= 2)
			return 0;
		State arr[] = new State[x.length];
		for(int i=0; i<x.length; i++)
		{
			arr[i] = new State(x[i], y[i]);
		}
		int count = 0;
		for(int i=0; i<arr.length-2; i++)
		{
			for(int j=i+1; j<arr.length-1; j++)
			{
				for(int k=j+1; k<arr.length; k++)
				{
					System.out.println(i+","+j+","+k);
					if(check(arr[i], arr[j], arr[k]) == false)
					{
						//System.out.println(i+","+j+","+k);
						count++;
					}
				}
			}
		}
		return count;
	}
	public boolean check(State p, State q, State r)
	{
	    int a = (q.y - p.y) * (r.x - q.x);
	    int b = (q.x - p.x) * (r.y - q.y);
	    if (Math.abs(a - b) < 0.1) 
	    	return true;
	    else
	    	return false;
	}
}
class State
{
	int x;
	int y;
	State(int x, int y)
	{
		this.x = x;
		this.y = y;
	}
}


/*
2014 India University Tour 

500

Problem Statement 

     
You are given a collection of points in the plane, with x[i] and y[i] representing the i-th point. Return the number of triangles that can be formed using three of the points as vertices.
 

Definition 

     
Class: PointsInAPlane 
Method: howManyTriangles 
Parameters: int[], int[] 
Returns: int 
Method signature: int howManyTriangles(int[] x, int[] y) 
(be sure your method is public) 
 

Limits 

     
Time limit (s): 2.000 
Memory limit (MB): 256 
 

Notes 

- Three points can only form a triangle if they are not colinear. 

Constraints 

- x will contain between 1 and 50 elements, inclusive. 
- y will contain the same number of elements as x. 
- Each element of x will be between -1,000,000,000 and 1,000,000,000, inclusive. 
- Each element of y will be between -1,000,000,000 and 1,000,000,000, inclusive. 
- No two points will be at the same position. 

Examples 

0)  
     

{0, 1, 2}
 
{0, 1, 0}
 
 
Returns: 1
 

These three points for a triangle. 
 
 
1)  
     

{0, 1, 2}
 
{0, 0, 0}
 
 
Returns: 0
 

These three points sit along the x-axis, and are all collinear. 
 
 
2)  
     

{0, 1, 2, 3}
 
{0, 2, 1, 3}
 
 
Returns: 4
 

Pick any three points, and they form a triangle. 
 
 
3)  
     

{0, 1, 2, 1}
 
{0, 0, 0, 1}
 
 
Returns: 3
 

 
 
 

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved. 

*/
